andonis_nmds <- metaMDS(andonis_df_dist, noshare = TRUE, autotransform = FALSE, trymax = 500) %>% scores(display="site") %>%
as_tibble(rownames = "sample")
metadata_nmds <- merge(andonis_df_metadata, andonis_nmds, by = "sample") %>% mutate(treatment = factor(treatment, levels = c("Control", "Low",
"High")))
centroid_treatment <- metadata_nmds %>%
group_by(treatment) %>%
summarise(NMDS1 = mean(NMDS1),
NMDS2 = mean(NMDS2))
metadata_nmds %>%
ggplot(aes(x = NMDS1, y = NMDS2, colour = treatment)) +
stat_ellipse(geom = "polygon", type = "t", level = 0.75, alpha = 0.2, show.legend = F) +
geom_point() +
geom_point(data = centroid_treatment, size = 5, shape = 21, colour = "black",
aes(fill = treatment), show.legend = FALSE) +
scale_color_manual(values=c("#5E73A8", "#F5BC4B", "#CA533F")) +
scale_fill_manual(values=c("#5E73A8", "#F5BC4B", "#CA533F")) +
theme_clean()
centroid_sex <- metadata_nmds %>%
group_by(sex) %>%
summarise(NMDS1 = mean(NMDS1),
NMDS2 = mean(NMDS2))
metadata_nmds %>%
ggplot(aes(x = NMDS1, y = NMDS2, colour = sex)) +
stat_ellipse(geom = "polygon", type = "t", level = 0.75, alpha = 0.2, show.legend = F) +
geom_point(shape = 21) +
geom_point(data = centroid_sex, size = 5, shape = 21, colour = "black",
aes(fill = sex), show.legend = FALSE) +
theme_clean()
adonis_test <- adonis2(andonis_df_dist~treatment, data = metadata_nmds)
adonis_test
bd <- betadisper(as.dist(andonis_df_dist), metadata_nmds$treatment)
permutest(bd, pairwise = TRUE)
OTU_OU_df <- gut_seq_treatment %>%
group_by(sample) %>%
summarize(n_seq = sum(value)) %>%
ungroup() %>%
merge(gut_seq_treatment, by = "sample") %>%
mutate(rel_abund = value/n_seq)
View(OTU_OU_df)
sig_genera <- OTU_OU_df %>%
nest(data = -name) %>%
mutate(test = map(.x = data, ~aov(rel_abund~treatment, data =.x) %>% tidy)) %>%
unnest(test) %>%
mutate(p_adjust = p.adjust(p.value, method = "BH")) %>%
filter(p_adjust < 0.05) %>%
select(name, df, sumsq, meansq, statistic, p.value, p_adjust)
nrow(sig_genera)
as.data.frame(1:nrow(sig_genera)) %>%
rename(OTU_number = "1:nrow(sig_genera)") %>%
mutate(OTU_number = as.factor(OTU_number)) %>%
cbind(sig_genera) %>%
inner_join(OTU_OU_df, by = "name") %>%
mutate(rel_abund_per = 100 * (rel_abund + 1/20000)) %>%
mutate(treatment = factor(treatment, levels = c("Control", "Low",
"High"))) %>%
ggplot(aes(x= rel_abund_per, y = OTU_number, colour = treatment)) +
geom_jitter(position = position_jitterdodge(), alpha = 0.5) +
stat_summary(fun.data = mean_se, shape = 21, colour = "black",
aes(fill = treatment), show.legend = FALSE) +
coord_trans(x="log10") +
scale_color_manual(values=c("#5E73A8", "#F5BC4B", "#CA533F")) +
scale_fill_manual(values=c("#5E73A8", "#F5BC4B", "#CA533F")) +
labs(x = "Relative abudance (log10; mean SE)", y = "OTU ")
gut_seq_treatment_path <- gut_seq_treatment %>%
filter(name == "d__Bacteria.p__Actinobacteriota.c__Actinobacteria.o__Corynebacteriales.f__Mycobacteriaceae.g__Mycobacterium.__") %>%
arrange(value) %>%
rename(mycobacterium_marinum = value) %>%
select(-name)
diverity_metrics <- gut_seq_diverity_treatment %>%
select(sample, richness_raw, shannon_index, invsimpson_index, simpson_index, richness_rare, n_seq)
gut_treatment_path_comp <- merge(gut_seq_treatment_path, diverity_metrics, by = "sample") %>%
mutate(prop_mycobacterium = mycobacterium_marinum/n_seq) %>%
mutate(treatment = factor(treatment, levels = c("Control", "Low",
"High")))
gut_treatment_path_comp %>%
ggplot(aes(x = treatment, y = prop_mycobacterium, fill = treatment)) +
geom_half_boxplot(side = "l", outlier.shape = NA) +
geom_half_point(side = "r", shape = 21) +
scale_fill_manual(values=c("#5E73A8", "#F5BC4B", "#CA533F")) +
theme_clean()
gut_treatment_path_comp %>%
ggplot(aes(x = prop_mycobacterium, y = invsimpson_index, colour = treatment)) +
geom_point() +
geom_smooth() +
scale_y_log10() +
scale_x_log10() +
scale_color_manual(values=c("#5E73A8", "#F5BC4B", "#CA533F")) +
theme_clean() +
facet_wrap(~treatment)
gut_treatment_path_comp %>%
ggplot(aes(x = prop_mycobacterium, y = weight_g, colour = treatment)) +
geom_point() +
geom_smooth() +
scale_y_log10() +
scale_x_log10() +
theme_clean() +
scale_color_manual(values=c("#5E73A8", "#F5BC4B", "#CA533F")) +
facet_wrap(~treatment)
install.packages(c("cli", "commonmark", "data.table", "devtools", "digest", "markdown", "mikropml", "minqa", "openssl", "recipes", "rlang", "spatstat.utils", "sys", "vegan", "wk", "xfun", "yaml"))
install.packages(c("BiocManager", "colourpicker", "commonmark", "data.table", "digest", "e1071", "fontawesome", "graphlayouts", "jsonlite", "maptools", "markdown", "mgcv", "minqa", "openssl", "pkgload", "polyclip", "processx", "ps", "ragg", "RcppAnnoy", "rpart", "shiny", "spatstat.data", "spatstat.geom", "spatstat.sparse", "spatstat.utils", "sys", "vctrs", "vegan", "wk", "xfun", "XML", "yaml", "zip"))
install.packages("minqa")
install.packages(c("commonmark", "data.table", "digest", "e1071", "graphlayouts", "jsonlite", "maptools", "markdown", "mgcv", "minqa", "openssl", "polyclip", "processx", "ps", "ragg", "RcppAnnoy", "rpart", "spatstat.data", "spatstat.geom", "spatstat.sparse", "spatstat.utils", "sys", "vctrs", "vegan", "wk", "xfun", "XML", "yaml", "zip"))
install.packages("spatstat.data")
install.packages(c("commonmark", "data.table", "digest", "e1071", "graphlayouts", "jsonlite", "maptools", "markdown", "mgcv", "minqa", "openssl", "polyclip", "processx", "ps", "ragg", "RcppAnnoy", "rpart", "spatstat.data", "spatstat.geom", "spatstat.sparse", "spatstat.utils", "sys", "vctrs", "vegan", "wk", "xfun", "XML", "yaml", "zip"))
install.packages(c("Seurat", "SeuratObject"))
install.packages(c("evaluate", "future", "future.apply", "ggfun", "ggrepel", "lubridate", "plotly", "RcppArmadillo", "RcppEigen", "recipes", "rmarkdown", "Seurat", "SeuratObject", "sf", "sp", "spatstat.explore", "spatstat.random"))
library(installr)
install.packages(c("aplot", "bit", "boot", "data.table", "digest", "evaluate", "foreign", "gert", "ggfun", "gghalves", "glmnet", "globals", "graphlayouts", "gtools", "htmltools", "httpuv", "infer", "jsonlite", "knitr", "leidenbase", "maptools", "matrixStats", "openssl", "ordinal", "parallelly", "pathfindR.data", "pkgbuild", "pkgdown", "png", "progressr", "proj4", "raster", "rgeos", "roxygen2", "rsample", "RSQLite", "s2", "sass", "Seurat", "slider", "stringr", "terra", "testthat", "timeDate", "tinytex", "units", "vctrs", "whisker", "wk", "xfun", "XML"))
install.packages("reticulate")
getwd()
library(reticulate)
install_miniconda()
install_miniconda()
virtualenv_exists()
conda_list()
use_virtualenv("r-reticulate")
use_virtualenv("C:\\Users\\adou0002\\AppData\\Local\\r-miniconda\\envs\\r-reticulate")
use_virtualenv("C:\\Users\\adou0002\\AppData\\Local\\r-miniconda\\envs\\r-reticulate/python.exe")
use_virtualenv("C:\\Users\\adou0002\\AppData\\Local\\r-miniconda\\envs\\r-reticulate/python.exe/")
use_virtualenv(C:\\Users\\adou0002\\AppData\\Local\\r-miniconda\\envs\\r-reticulate/python.exe/)
use_virtualenv(" C:\\Users\\adou0002\\AppData\\Local\\r-miniconda/python.exe")
use_virtualenv("C:\\Users\\adou0002\\AppData\\Local\\r-miniconda/python.exe")
use_virtualenv("base")
virtualenv_list()
use_condaenv('r-reticulate')
virtualenv_list()
conda_list()
np <- import("numpy")
array(1:24,c(4,3,2))
?array
x <- np$reshape(np$arange(1, 25), c(4L, 3L, 2L))
x
#See environments
conda_list()
#Having previously imported reticulate, install scanpy and import it to R
reticulate::py_install("scanpy", pip = T)
sc <- import("scanpy")
#Having previously imported reticulate, install scanpy and import it to R
reticulate::conda_install("scanpy", pip = T)
#Having previously imported reticulate, install scanpy and import it to R
reticulate::conda_install('r-reticulate',"scanpy")
sc <- import("scanpy")
sc <- import("scanpy")
?use_condaenv
conda_list()
?conda_install()
#Having previously imported reticulate, install scanpy and import it to R
reticulate::conda_install(envname = 'r-reticulate', packages = "scanpy")
sc <- import("scanpy")
conda_update(conda = 'auto')
conda_update(conda = 'r-reticulate')
sc <- import("scanpy")
#See environments
conda_list()
library(reticulate)
#Set r-reticulate as the working environment
use_condaenv('r-reticulate')
sc <- import("scanpy")
adata = sc.datasets.pbmc3k_processed()
adata <- sc$datasets$pbmc3k_processed()
adata
sc$pp$neighbors(adata, n_neighbors = 20L, use_rep = 'pca')
sc$pp$neighbors(adata, n_neighbors = 20L, use_rep = 'X_pca')
sc$tl$paga(adata, groups = 'celltype')
sc$tl$paga(adata, groups = 'louvain')
ig <- import("igraph")
reticulate::conda_install(envname = 'r-reticulate', packages = "igraph")
ig <- import("igraph")
ig <- import("igraph")
install.packages(c("BH", "broom", "class", "codetools", "colorspace", "conflicted", "curl", "dbplyr", "dplyr", "DT", "e1071", "evaluate", "extrafont", "fansi", "fontawesome", "forcats", "formatR", "fs", "future", "gargle", "ggplot2", "ggrepel", "httpuv", "igraph", "kernlab", "knitr", "lubridate", "markdown", "MASS", "mikropml", "modeldata", "naniar", "nlme", "pak", "pbkrtest", "ragg", "raster", "Rcpp", "RcppArmadillo", "RcppTOML", "RCurl", "readr", "readxl", "reticulate", "RhpcBLASctl", "rmarkdown", "Rttf2pt1", "s2", "sass", "sourcetools", "sp", "spatial", "spatstat.explore", "spatstat.geom", "spatstat.random", "survival", "terra", "tidygraph", "tidyr", "tinytex", "utf8", "vctrs", "visdat", "vroom", "xfun", "xgboost", "yaml"))
install.packages(c("anndata", "ape", "aplot", "BiocManager", "blob", "broom", "cachem", "caret", "classInt", "commonmark", "crunch", "data.table", "dbplyr", "dplyr", "dtplyr", "fastmap", "flexmix", "FNN", "future", "ggfortify", "gh", "glmnet", "googledrive", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httr", "igraph", "ipred", "lava", "lme4", "magick", "MASS", "mgcv", "modelenv", "modelr", "openssl", "packrat", "parallelly", "parsnip", "pillar", "ps", "raster", "RcppArmadillo", "recipes", "rgeos", "rlang", "RSQLite", "sf", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.random", "spatstat.sparse", "spatstat.utils", "spData", "spdep", "survival", "terra", "testthat", "tibble", "tidyverse", "truncnorm", "vctrs", "wk", "workflows", "XML"))
install.packages(c("anndata", "ape", "aplot", "BiocManager", "blob", "broom", "cachem", "caret", "classInt", "commonmark", "crunch", "data.table", "dbplyr", "dplyr", "dtplyr", "fastmap", "flexmix", "FNN", "future", "ggfortify", "gh", "glmnet", "googledrive", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httr", "igraph", "ipred", "lava", "lme4", "magick", "MASS", "mgcv", "modelenv", "modelr", "openssl", "packrat", "parallelly", "parsnip", "pillar", "ps", "raster", "RcppArmadillo", "recipes", "rgeos", "rlang", "RSQLite", "sf", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.random", "spatstat.sparse", "spatstat.utils", "spData", "spdep", "survival", "terra", "testthat", "tibble", "tidyverse", "truncnorm", "vctrs", "wk", "workflows", "XML"))
install.packages(c("anndata", "ape", "aplot", "BiocManager", "blob", "broom", "cachem", "caret", "classInt", "commonmark", "crunch", "data.table", "dbplyr", "dplyr", "dtplyr", "fastmap", "flexmix", "FNN", "future", "ggfortify", "gh", "glmnet", "googledrive", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httr", "igraph", "ipred", "lava", "lme4", "magick", "MASS", "mgcv", "modelenv", "modelr", "openssl", "packrat", "parallelly", "parsnip", "pillar", "ps", "raster", "RcppArmadillo", "recipes", "rgeos", "rlang", "RSQLite", "sf", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.random", "spatstat.sparse", "spatstat.utils", "spData", "spdep", "survival", "terra", "testthat", "tibble", "tidyverse", "truncnorm", "vctrs", "wk", "workflows", "XML"))
install.packages(c("anndata", "ape", "aplot", "BiocManager", "blob", "broom", "cachem", "caret", "classInt", "commonmark", "crunch", "data.table", "dbplyr", "dplyr", "dtplyr", "fastmap", "flexmix", "FNN", "future", "ggfortify", "gh", "glmnet", "googledrive", "gtable", "haven", "hms", "htmltools", "htmlwidgets", "httr", "igraph", "ipred", "lava", "lme4", "magick", "MASS", "mgcv", "modelenv", "modelr", "openssl", "packrat", "parallelly", "parsnip", "pillar", "ps", "raster", "RcppArmadillo", "recipes", "rgeos", "rlang", "RSQLite", "sf", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.random", "spatstat.sparse", "spatstat.utils", "spData", "spdep", "survival", "terra", "testthat", "tibble", "tidyverse", "truncnorm", "vctrs", "wk", "workflows", "XML"))
install.packages(c("data.table", "dplyr", "fastmap", "haven", "rlang"))
install.packages(c("data.table", "dplyr", "fastmap", "haven", "rlang"))
install.packages(c("data.table", "dplyr", "fastmap", "haven", "rlang"))
install.packages(c("data.table", "dplyr", "fastmap", "haven", "rlang"))
install.packages(c("data.table", "dplyr", "fastmap", "haven", "rlang"))
install.packages(c("data.table", "dplyr", "fastmap", "haven", "rlang"))
install.packages(c("data.table", "dplyr", "fastmap", "haven", "rlang"))
install.packages(c("data.table", "rlang"))
install.packages("rlang")
install.packages("rlang")
install.packages(c("car", "cli", "dials", "ggplot2", "ggvenn", "googlesheets4", "hardhat", "lattice", "Matrix", "prodlim", "ps", "ranger", "RcppArmadillo", "RCurl", "rlang", "rmarkdown", "robustbase", "RSQLite", "tune", "xfun", "xgboost"))
install.packages(c("car", "cli", "dials", "ggplot2", "ggvenn", "googlesheets4", "hardhat", "lattice", "Matrix", "prodlim", "ps", "ranger", "RcppArmadillo", "RCurl", "rlang", "rmarkdown", "robustbase", "RSQLite", "tune", "xfun", "xgboost"))
install.packages(c("car", "cli", "dials", "ggplot2", "ggvenn", "googlesheets4", "hardhat", "lattice", "Matrix", "prodlim", "ps", "ranger", "RcppArmadillo", "RCurl", "rlang", "rmarkdown", "robustbase", "RSQLite", "tune", "xfun", "xgboost"))
library(tidyverse)
library(ggplot2)
library(org.Hs.eg.db)
library(clusterProfiler)
library(pathfindR)
library(enrichplot)
library(ggnewscale)
library(AnnotationDbi)
detach("package:clusterProfiler", unload = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler", force = T)
remove.packages("clusterProfiler")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler", version = "4.6.2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler", version = "4.6")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = '3.17', "clusterProfiler")
BiocManager::install(version = '3.17')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
library(clusterProfiler)
install.packages("recipes")
install.packages(c("norm", "pak", "pathfindR.data", "rlang", "s2", "units", "vroom", "xml2"))
install.packages(c("ggbeeswarm", "rlang"))
library(installr)
updateR()
install.packages(c("evaluate", "KernSmooth", "later", "MASS", "pathfindR", "scattermore", "speedglm", "testthat", "wk"))
install.packages("wk")
# Create test directory
setwd("\\\\ad.monash.edu/home/User060/adou0002/Desktop/mutateR/mutateR")
library(devtools)
library(roxygen2)
devtools::document()
devtools::install()
library(mutateR)
test <- run_mutateR(gene_id = 'TP53',
species = 'hsapiens',
genome = BSgenome.Hsapiens.UCSC.hg38,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 1, human TP53, plenty of recommended gRNA pairs but no recommended terminal_exon_case_pairs
library(BSgenome.Drerio.UCSC.danRer11)
library(BSgenome.Hsapiens.UCSC.hg38)
test <- run_mutateR(gene_id = 'TP53',
species = 'hsapiens',
genome = BSgenome.Hsapiens.UCSC.hg38,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 1, human TP53, plenty of recommended gRNA pairs but no recommended terminal_exon_case_pairs
View(test$pairs)
test$transcript_id
test$exons
test$scored_grnas
range(test$scored_grnas$gc)
test$plot
plot_grna_heatmap(exon_gr = test$exons, transcript_id = test$transcript_id)
# Get list of transcripts of gene of interest
tx_info <- get_gene_info(gene_id = 'TP53',
species = 'hsapiens')
# Select canonical transcript by excluding all other rows
canonical_tx <- tx_info$canonical$ensembl_transcript_id[1]
tp53_exons_gr <- get_exon_structures(transcript_id = canonical_tx,
species = 'hsapiens',
output = 'GRanges')
# Test exon phases
exon_phases <- check_exon_phase(tp53_exons) # From df input, works. TODO: Include parameter to exclude compatible == FALSE pairs.
tp53_exons <- get_exon_structures(transcript_id = canonical_tx,
species = 'hsapiens',
output = 'data.frame')
exon_phases_gr <- check_exon_phase(tp53_exons_gr) # Also works, amazing! Check that above compatible == F filter also works.
cas9_sites   <- find_cas9_sites(tp53_exons_gr, BSgenome.Hsapiens.UCSC.hg38) # Works, outputs GRanges
g1 <- score_grnas(grna_gr = cas9_sites, method = ruleset1)
g1 <- score_grnas(grna_gr = cas9_sites, method = 'ruleset1')
g1 <- score_grnas(grna_gr = cas9_sites, method = 'azimuth')
g1 <- score_grnas(grna_gr = cas9_sites, method = 'deephf')
View(g1)
view(1g)
view(g1)
data(crisprScore::scoringMethodsInfo)
crisprScore::scoringMethodsInfo
library(crisprScore)
?getAzimuthScores
if (interactive()){
flank5 <- "ACCT" #4bp
spacer <- "ATCGATGCTGATGCTAGATA" #20bp
pam    <- "AGG" #3bp
flank3 <- "TTG" #3bp
input  <- paste0(flank5, spacer, pam, flank3)
results <- getAzimuthScores(input)
}
install_python(version = "2.7")
reticulate::install_python(version = '2.7')
?reticulate::install_python
library(reticulate)
install_python(version = '2.7')
py_available()
basilisk::BasiliskEnvironment()
basilisk::defaultPythonVersion
devtools::document()
devtools::install()
library(mutateR)
devtools::document()
devtools::install()
library(mutateR)
test7 <- run_mutateR(gene_id = 'frmpd3',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 7, >12 exons to evoke heatmap plotting behaviour
test7$plot
test8 <- run_mutateR(gene_id = 'nrcama',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 8, large gene
test8$plot
test8 <- run_mutateR(gene_id = 'usp54a',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 8, large gene
test8$plot
View(test)
devtools::document()
devtools::install()
library(mutateR)
test <- run_mutateR(gene_id = 'TP53',
species = 'hsapiens',
genome = BSgenome.Hsapiens.UCSC.hg38,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 1, human TP53, plenty of recommended gRNA pairs but no recommended terminal_exon_case_pairs
test$gene_id
test$pairs
view(test$pairs)
test$gene_symbol
test$gene_id
test$transcript_id
test$exons
test$scored_grnas
test$plot
test <- run_mutateR(gene_id = 'TP53',
species = 'hsapiens',
genome = BSgenome.Hsapiens.UCSC.hg38,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 1, human TP53, plenty of recommended gRNA pairs but no recommended terminal_exon_case_pairs
test2 <- run_mutateR(gene_id = 'tnfa',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 2, zebrafish tnfa, no recommended gRNA pairs
test2$plot
devtools::document()
devtools::install()
library(mutateR)
test <- run_mutateR(gene_id = 'TP53',
species = 'hsapiens',
genome = BSgenome.Hsapiens.UCSC.hg38,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 1, human TP53, plenty of recommended gRNA pairs but no recommended terminal_exon_case_pairs
test2 <- run_mutateR(gene_id = 'tnfa',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 2, zebrafish tnfa, no recommended gRNA pairs
test3 <- run_mutateR(gene_id = 'sgsh',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 3, zebrafish sgsh, recommended both regular and terminal exon cases
test4 <- run_mutateR(gene_id = 'opn4.1',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 4, zebrafish opn4.1 (single ~large coding exon)
test5 <- run_mutateR(gene_id = 'spry2',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 5, zebrafish, spry2, Two exons but only one coding exon
test7 <- run_mutateR(gene_id = 'frmpd3',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 7, >12 exons to evoke heatmap plotting behaviour
test7$plot
test7$gene_id
test7$gene_symbol
devtools::document()
devtools::install()
library(mutateR)
test7 <- run_mutateR(gene_id = 'frmpd3',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 7, >12 exons to evoke heatmap plotting behaviour
test7$plot
devtools::document()
devtools::install()
library(mutateR)
test7 <- run_mutateR(gene_id = 'frmpd3',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 7, >12 exons to evoke heatmap plotting behaviour
test7$plot
head(test7$pairs,0)
devtools::document()
devtools::install()
library(mutateR)
test7 <- run_mutateR(gene_id = 'frmpd3',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 7, >12 exons to evoke heatmap plotting behaviour
test7$plot
devtools::document()
devtools::install()
library(mutateR)
test7 <- run_mutateR(gene_id = 'frmpd3',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 7, >12 exons to evoke heatmap plotting behaviour
test7$plot
test7$plot
test7$gene_symbol
devtools::document()
devtools::install()
library(mutateR)
test7 <- run_mutateR(gene_id = 'frmpd3',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 7, >12 exons to evoke heatmap plotting behaviour
test7$plot
devtools::document()
devtools::install()
library(mutateR)
test7 <- run_mutateR(gene_id = 'frmpd3',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 7, >12 exons to evoke heatmap plotting behaviour
test7$plot
devtools::document()
devtools::install()
library(mutateR)
test7 <- run_mutateR(gene_id = 'frmpd3',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 7, >12 exons to evoke heatmap plotting behaviour
test7$plot
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
tp53_res <- run_mutateR(
gene_id = "TP53",
species = "hsapiens",
genome = BSgenome.Hsapiens.UCSC.hg38,
nuclease = "Cas9",
score_method = 'ruleset1',
top_n = NULL,
quiet = FALSE,
)
names(tp53_res)
kableExtra::scroll_box(knitr::kable(head(tp53_res$pairs,5)),width = '700px')
tp53_recommended <- filter(tp53_res$pairs, tp53_res$pairs$recommended == TRUE)
kableExtra::scroll_box(knitr::kable(head(tp53_recommended,5)),width = '700px')
tp53_res$plot
frmpd3 <- run_mutateR(gene_id = 'frmpd3',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1')
frmpd3$plot
opn4.1 <- run_mutateR(gene_id = 'opn4.1',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1')
opn4.1_recommended <- filter(opn4.1$pairs, opn4.1$pairs$recommended == TRUE)
kableExtra::scroll_box(knitr::kable(head(opn4.1_recommended,5)),width = '700px')
View(opn4.1)
view(opn4.1)
View(opn4.1)
View(opn4.1_recommended)
opn4.1$plot
library(BSgenome.Drerio.UCSC.danRer11)
library(BSgenome.Hsapiens.UCSC.hg38)
frmpd3$plot
frmpd3$plot
?suppressPackageStartupMessages
devtools::document()
devtools::install()
library(mutateR)
test7 <- run_mutateR(gene_id = 'frmpd3',
species = 'drerio',
genome = BSgenome.Drerio.UCSC.danRer11,
nuclease = 'Cas9',
score_method = 'ruleset1') # Test case 7, >12 exons to evoke heatmap plotting behaviour
devtools::document()
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(mutateR)
library(BSgenome.Hsapiens.UCSC.hg38)
library(devtools)
?install_github
devtools::document()
devtools::install()
library(mutateR)
devtools::load_all()
devtools::document()
devtools::document()
